% =================================EXPRESS RETINOTOPIC MAPPING=================================
% To get vertical, horizontal meridians on v1.
% Stimulus used are checkered wedges. Colors on wedges alternates at 8Hz.
% Conditions : Vertical (1), Horizontal (2), Everything else (3)
% Blocked design: Each 20second stimulus block is flanked by 20second fixation blocks.
% 6 blocks in total. Each condition is repeated twice in a run.
% [FIXATION TASK]
% PRESS RIGHT BUTTON WHEN FIXATION CHANGES TO RED. AND GREEN BUTTON WHEN FIXATION CHANGES TO GREEN. DON'T PRESS WHEN WHITE
% [Usage]
%        run 'RetMap' on command window & input variables when prompted
% VERSION HISTORY---------------------------
% 18 02 14 - STARTED WRITING
% 19 02 14 - DONE

clear all;
% debug = input('Debug mode? (1 = Yes, 0 = No) : ');
debug = 0;
behav = input('Behav only? (1 = Yes, 0 = No) : ');
if ~isnumeric(debug)  || (debug~=1 && debug~=0)
    fprintf('Debug mode MUST be [1] or [0].\n Try "help %s" to see the usage.\n', mfilename()); return;
end
if ~debug
    subNo = input('Subject Number: ');
    if ~isnumeric(subNo)
        fprintf('Subject no. MUST be interger.\n Try "help %s" to see the usage.\n', mfilename()); return;
    end
    runNo = input('Run Number    : ');
    if ~isnumeric(runNo)
        fprintf('Run no. MUST be interger.\n Try "help %s" to see the usage.\n', mfilename()); return;
    end
elseif debug,
    subNo = 99; runNo = 999;
end

%% Timing specs ======================================
if debug
    duration_block    = 10;
    duration_fixation = 2;
else
    if behav == 0
        duration_block    = 20;
        duration_fixation = 20;
    else
        duration_block    = 10;
        duration_fixation = 2;
    end    
end
duration_total    = duration_block + duration_fixation;
rate_flicker      = 8; % stimulus flicker rate
duration_stim     = 1/rate_flicker;
rate_fixflicker   = 0.5; % fixation flicker rate

duration_fixflick = 1/rate_fixflicker; % duration of fixation
numClrChange = duration_block/duration_fixflick;

%% Paradigm  ======================================
% paradigm = [randperm(3) randperm(3)];
para_orders = perms(1:3);
if mod(runNo,3)==1
    paradigm = [para_orders(1,:),para_orders(2,:)];
elseif mod(runNo,3)==2
    paradigm = [para_orders(3,:),para_orders(4,:)];
elseif mod(runNo,3)==0
    paradigm = [para_orders(5,:),para_orders(6,:)];
end
nblocks  = length(paradigm);
makeparafile(duration_fixation, duration_block, subNo, runNo, paradigm)
outputDir = ['Subject ' num2str(subNo, '%.3i') '/'];
if ~isdir(outputDir),  mkdir(outputDir);     end
if behav == 0
    fNameStr = [outputDir mfilename() '_' num2str(subNo,'%.3d') '_' num2str(runNo,'%.3d')];
else
    fNameStr = [outputDir mfilename() '_' num2str(subNo,'%.3d') '_' num2str(runNo,'%.3d') '_behav_'];
end
%% Open screen and enable alpha blending ======================================
AssertOpenGL;
OpenScreen;
glsl = MakeTextureDrawShader(wPtr, 'SeparateAlphaChannel'); % Create a special texture drawing shader for masked texture drawing

%% Checkered board and other misc stim specs ======================================
if debug, texsize = 1000;
else      texsize = 1000;
end
pxpersq        = 10;
fixlen         = 20;
fixClr_start   = [255 255 255]; % fixation white when waiting for trigger
fixClr_fix     = [255 255 225]; % fixation white during fixation

wedgeSz1       = 10; % size of checkered board % change to 20???
maskSz1        = 180 - wedgeSz1;
mask1.wedgeSz1 = wedgeSz1;
mask1.Start    = [(wedgeSz1/2) , 180+(wedgeSz1/2)];
mask1.Angle    = maskSz1;

mask2.wedgeSz1 = wedgeSz1;
mask2.Start    = [90+(wedgeSz1/2) , 270+(wedgeSz1/2)];
mask2.Angle    = maskSz1;

maskSz2        = 30; 
wedgeSz2       = 90-maskSz2; % size of checkered board
mask3.wedgeSz2 = wedgeSz2;
mask3.Start    = [90-(maskSz2/2) , 180-(maskSz2/2), 270-(maskSz2/2) , 360-(maskSz2/2)]; %STARTING ANGLES
mask3.Angle    = maskSz2; % SIZE OF MASKING WEDGE

dstRect = [centerX-texsize-5  centerY-texsize-5  centerX+texsize+5 centerY+texsize+5]; %checkered board destination

%% Make checkered board inside aperture ======================================
chkdboard1 = MakeCheckeredBoard(texsize*2 ,texsize*2 ,pxpersq ,'w'); % 1st sq white
chkdboard1 = AnnulusOnTexture(texsize,chkdboard1);
chkdboardtex1 = Screen('MakeTexture', wPtr, chkdboard1, [], [], [], [], glsl);

chkdboard2 = MakeCheckeredBoard(texsize*2 ,texsize*2 ,pxpersq ,'b'); % 1st sq black
chkdboard2 = AnnulusOnTexture(texsize,chkdboard2);
chkdboardtex2 = Screen('MakeTexture', wPtr, chkdboard2, [], [], [], [], glsl);

%% Output beh s ======================================
outputfName  = [fNameStr '_beh.txt'];
% ResultSet    =  zeros(nblocks,numClrChange * 2 + 3);
nTrials_total = numClrChange * nblocks;
ResultSet=zeros(nTrials_total,5);
ResultSet(:,4) = 1;
PercentRightSet = zeros(1,nblocks);
% [format] 1 = block number | 2 = color | 3 - ans | 4 = right/wrong | 5 = RT

%% Input devices specs ======================================
KbName('UnifyKeyNames')
quitkey   = 'Q';
startkey1 = 'space';
startkey2 = 'enter';
LKey      = 'LeftArrow';
RKey      = 'RightArrow';
% NNL Grips {from CNL} --------------------
% Hand      Finger       Code
% Left      Thumb        a
% Left      Index        b
% Right     Thumb        d
% Right     Index        c
LThumb = 'a';
LIndex = 'b';
RThumb = 'd';
RIndex = 'c';

% Current designs box --------------------
Left1 = '1!'; % little finger
Left2 = '2@'; % left ring;
Left3 = '3#'; % left middle
Left4 = '4$'; % left index
Right1 = '6^'; % Right Little
Right2 = '7&'; % ring
Right3 = '8*'; % middle
Right4 = '9('; % index

LKey2 = Left2;
RKey2 = Right2;

% % [INPUT 1] = trigger  : 1 = apple keyboard | 2 = scanner pulse | 3 = A4Tech keyboard
% % [INPUT 2] = response : 1 = apple keyboard | 2 = old response boxes | 3 = NNL Grips | 4 = Current designs button boxes.
ResponseDevice = 4;
if behav == 1
    [DevIDs,devices, QuitSignal] = getDevID2(2,ResponseDevice);
else
    [DevIDs,devices, QuitSignal] = getDevID2(2,ResponseDevice);
end

TrigDevID = DevIDs{1};
RespDevID = DevIDs{2};
if QuitSignal ==1 ,
    sca;    ShowCursor;    return,
end
% TrigDevID = [3]; % 8-keyboard; 2-NNL Grips; 4-scanner pulse
% RespDevID = [];
trialCounter = 0;
QuitSignal = 0;
ListenChar;
KbQueueCreate(TrigDevID);
KbQueueStart(TrigDevID);

%% Waiting for start trigger ======================================
while 1,
    DrawFixation(wPtr, centerX, centerY, fixlen,2,fixClr_start)
    Screen('Flip', wPtr);
    QuitKeyWait; if QuitSignal ==1 , return, end
    [keyIsDown, FirstKeyDownTime] = KbQueueCheck(TrigDevID);
    if keyIsDown
        if FirstKeyDownTime(KbName(startkey1)) ||FirstKeyDownTime(KbName(startkey2))
            KbQueueCreate(RespDevID);
            KbQueueStart(RespDevID);
            runStartTime = Screen('Flip', wPtr); % ANCHORS START TIME OF RUN
            break
        else
            continue
        end
    end
end

%% Main experiment body ======================================
try
    for x=1:nblocks+1
        
        if x~=nblocks+1,   condition = paradigm(x);     end
        switch condition
            case 1 % VERTICAL MERIDIAN
                mask = mask1;
                gAlpha = 1;
            case 2 % HORIZONTAL MERIDIAN
                mask = mask2;
                gAlpha = 1;
            case 3 % EVERYTHING ELSE
                mask = mask3;
                gAlpha = 0.2;
        end
        startAngle = mask.Start;
        MaskSz     = mask.Angle;
        nMasks     = size(startAngle,2);
        
        starttime_block = runStartTime + ((x-1)*duration_total);
        if x ~=nblocks+1,   endtime_block = starttime_block + duration_total;
        else                endtime_block = starttime_block + duration_fixation;        end
        
        clrChngeSeq  = zeros(1,9999);
        clrChngeSeq1 = zeros(1,numClrChange);
        clrChngeIdx  = 1;
        clrChngeIdx2 = 0;
        
        fixClr_Order  = randi(2);% 1 = RED first
        blankFixIndx  = randperm(numClrChange);
        blankfixTrialsId = blankFixIndx(1:randi(3))
        
        if fixClr_Order == 1,  fixClr_task    = [0 255 0 ; 255 0 0];
        else                   fixClr_task    = [255 0 0 ; 0 255 0]; end
        ansLog       = ones(1,numClrChange);
        
        fprintf('\n===== Block %d ===== \n', x)
        tic
        while GetSecs <= endtime_block;
            
            timeElasped = GetSecs - starttime_block ;
            
            if GetSecs - starttime_block  > duration_fixation
                
                if mod(timeElasped,duration_stim*2)<duration_stim,
                    Screen('DrawTexture', wPtr, chkdboardtex1, [], [],[],[], gAlpha);
                else
                    Screen('DrawTexture', wPtr, chkdboardtex2, [], [],[],[], gAlpha);
                end
                
                for maskNum = 1:nMasks,
                    Screen('FillArc',wPtr,[0 0 0],dstRect,startAngle(maskNum),MaskSz);
                end
                
                Screen('DrawDots', wPtr, [centerX centerY], 50, [0 0 0],[],2);
                
                if mod(timeElasped,duration_fixflick*2)<duration_fixflick ,
                    fixClrId = 1; % fixation colour id
                    clrChngeIdx = clrChngeIdx + 1;
                    clrChngeSeq(clrChngeIdx) = fixClrId;
                else
                    fixClrId = 2;
                    clrChngeIdx = clrChngeIdx + 1;
                    clrChngeSeq(clrChngeIdx) = fixClrId;
                end
                % %------------------------ GETTTING START OF NEW TRIAL------------------------% %
                if clrChngeSeq(clrChngeIdx) ~= clrChngeSeq(clrChngeIdx-1)
                    trialCounter = trialCounter + 1; % TRIAL NUMBER FOR WHOLE EXPT
                    clrChngeIdx2 = clrChngeIdx2 +1;
                    clrChngeSeq1(clrChngeIdx2)=fixClrId;
                    trialstarttime = GetSecs;
                    if find(clrChngeIdx2 == blankfixTrialsId(:))
                        fprintf('Trial Number: %d --- White\n', trialCounter);
                        ResultSet(trialCounter, 2) = 0;
                    else
                        if fixClr_Order ==1,
                            if fixClrId ==1,
                                fprintf('Trial Number: %d --- Green\n', trialCounter);
                                ResultSet(trialCounter, 2) = 1;
                            elseif fixClrId ==2,
                                fprintf('Trial Number: %d --- Red\n', trialCounter);
                                ResultSet(trialCounter, 2) = 2;
                            end
                        else
                            if fixClrId ==2,
                                fprintf('Trial Number: %d --- Green\n', trialCounter);
                                ResultSet(trialCounter, 2) = 1;
                            elseif fixClrId ==1,
                                fprintf('Trial Number: %d --- Red\n', trialCounter);
                                ResultSet(trialCounter, 2) = 2;
                            end
                        end
                    end
                    ResultSet(trialCounter, 1) = x;
                    
                end
                
                % % --------- DRAWING FIXATION --------- % %
                if find(clrChngeIdx2 == blankfixTrialsId(:))
                    DrawFixation(wPtr, centerX, centerY, fixlen,4,[255 255 255]);
                else
                    DrawFixation(wPtr, centerX, centerY, fixlen,4,fixClr_task(fixClrId,:));
                end
                
                % % --------- LOGGING BUTTON PRESSES --------- % %
                [keyIsDown, FirstKeyDownTime] = KbQueueCheck(RespDevID);
                if keyIsDown
                     % % --------- LEFT KEY = GREEN --------- % %
                    if FirstKeyDownTime(KbName(LKey)) || FirstKeyDownTime(KbName(LThumb)) ||FirstKeyDownTime(KbName(LKey2)) , % SUBJECT ANS = GREEN
                       reactiontime = GetSecs-trialstarttime;         
                        ResultSet(trialCounter, 3) = 1; % RESPONSE BUTTON PRESSED: LEFT BUTTON
                        ResultSet(trialCounter, 5) = reactiontime;
                        if find(clrChngeIdx2 == blankfixTrialsId(:))
                            fprintf('Wrong\n');
                        else
                            if fixClr_Order == 1
                                if fixClrId == 1;
                                    fprintf('Correct\n')                                 
                                elseif fixClrId == 2;
                                    ansLog(clrChngeIdx2) = 2; % wrong answer
                                    ResultSet(trialCounter,4) = 2;
                                    fprintf('Wrong\n');
                                end
                            elseif fixClr_Order == 2
                                if fixClrId == 2;
                                    fprintf('Correct\n')
                                elseif fixClrId == 1;
                                    ansLog(clrChngeIdx2) = 2; % wrong answer
                                    ResultSet(trialCounter,4) = 2;
                                    fprintf('Wrong\n');
                                end
                            end
                        end
                    end
                    % % --------- RIGHT KEY = RED --------- % %
                    if FirstKeyDownTime(KbName(RKey)) || FirstKeyDownTime(KbName(RThumb))||FirstKeyDownTime(KbName(RKey2)), % SUBJECT ANS = RED
                        reactiontime = GetSecs-trialstarttime; 
                         ResultSet(trialCounter, 3) = 2; % RESPONSE BUTTON PRESSED: RIGHT BUTTON
                         ResultSet(trialCounter, 5) = reactiontime;
                        if find(clrChngeIdx2 == blankfixTrialsId(:))
                            fprintf('Wrong\n');
                        else
                            if fixClr_Order ==1
                                if fixClrId == 2;
                                    fprintf('Correct\n')
                                elseif fixClrId == 1;
                                    ansLog(clrChngeIdx2) = 2; % wrong answer
                                    fprintf('Wrong\n');
                                end
                            elseif fixClr_Order == 2
                                if fixClrId == 1;
                                    fprintf('Correct\n')
                                elseif fixClrId == 2;
                                    ansLog(clrChngeIdx2) = 2; % wrong answer
                                    fprintf('Wrong\n');
                                end
                            end
                        end
                    end
                end
            else
                DrawFixation(wPtr, centerX, centerY, fixlen,4,fixClr_fix)
            end
            Screen('Flip',wPtr);
            QuitKeyWait; if QuitSignal ==1 , OutputBehData(ResultSet(1:trialCounter-1,:), outputfName); return, end
        end
        if x ~=nblocks+1
            ansLog
            percentRight = 100*length(find(ansLog(:)==1))/length(ansLog)       
            PercentRightSet(x) = percentRight; 
        end
        toc
    end
catch err
    OutputBehData(ResultSet(1:trialCounter-1,:), outputfName);
    sca
    rethrow(err)
end

%% Clean up =================================
runEndTime   = GetSecs;
OutputBehData(ResultSet, outputfName)
save( [fNameStr '_AllVar.mat' ])
fclose('all')
totalRunTime = runEndTime-runStartTime;
fprintf('\n\nTotal Run time = %6.4f \n',totalRunTime);
ShowCursor;
sca;

%% Summary stats =================================
fprintf('Summary stats =================================\n');
MeanPercentRight = mean(PercentRightSet)
fprintf('===============================================\n\n')
